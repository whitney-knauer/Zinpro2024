---
title: "IceQube Play"
author: "WAK"
date: "today"
format: 
  html:
    toc: true 
    toc-float: true
    toc-location: left
---

```{r}
#| include: false
#| warning: false
#| echo: false

library(epiDisplay)
library(knitr)
library(pROC)
library(tidyverse)
library(readxl)
library(ggplot2)
library(gmodels)
library(ggbeeswarm)
library(dplyr)
library(readr)
library(ggpubr)
library(psych)
library(lme4)
library(Matrix)
library(lmerTest)
library(irr)
library(lmerTest)
library(emmeans)
library(doBy)       
library(gmodels)    
library(car)           
library(cowplot)       
library(gridGraphics)  
library(multcomp)
library(hms)
library(gt)
library(lubridate)
```

## Data Steps

Pull in data. Goal is to bring in IceQube data to then match to specific calves and specific times. Let's see!

```{r}
#| include: false
#| warning: false
#| echo: false


directory <- "C:/Users/knaue020/Documents/GitHub/Zinpro2024/data/IceQube Data"
csv_files <- list.files(path=directory, pattern= "\\.csv$", full.names=TRUE)

first_file <- csv_files[1]
first_data <- read.csv(first_file, skip = 7, header = FALSE, stringsAsFactors = FALSE)

col_names <- first_data[1, ]

data_list <- lapply(csv_files, function(file) {
full_data <- read.csv(file, skip = 8, header = FALSE, stringsAsFactors = FALSE)
  colnames(full_data) <- col_names
  full_data$file_name <- gsub("\\.csv$", "", basename(file))
  
  return(full_data)
})

combined_data <- bind_rows(data_list, .id = "source_file")




combined_data <- 
  combined_data |> 
  mutate(
    file_name_clean = str_remove(file_name, "^IceQube Extended\\s+"),
    device_id = str_extract(file_name_clean, "^[^_]+"),           
    datem = str_extract(file_name_clean, "(?<=_)[^_]+(?=__)"), 
    datem = mdy(datem),
    time = str_extract(file_name_clean, "(?<=__)[^;].*"),        
    time = str_replace_all(time, ";", ":"), 
  ) |> 
  select(-file_name_clean) 


combined_data <- 
  combined_data |> 
  mutate(
          Date=mdy(Date),
          Time=hms::as.hms(Time), 
         `Standing [t]`=hms::as.hms(`Standing [t]`), 
         `Lying [t]`=hms::as.hms(`Lying [t]`), 
         time=hms::as.hms(time))


```

## Merge with Calf Key

Now Steps taken to merge calfkey with combined_data set so we can start arduous process of tagging on and off times along with feeding times.

```{r}
#| include: false
#| warning: false
#| echo: false


key<- read_csv("data/IceQubeKey.csv")

key<-
  key |> 
  mutate(IceCubeNumber = as.character(IceCubeNumber))

key<-
  key |> 
  rename(
    datem = Birthdate, 
    device_id = IceCubeNumber
  )

key<-key |> 
  mutate(datem=mdy(datem), 
         OnDate=mdy(OnDate), 
         OffDate=mdy(OffDate))

merged_data <- 
  combined_data |> 
  select(-file_name) |> 
  left_join(key, by = c("device_id", "datem"))

na_count <- sum(!complete.cases(merged_data))
print(na_count)
na_data <- merged_data[!complete.cases(merged_data), ]

```

Have to manipulate the key to match with the date the tags were cleared. So added an "on date" variable to the merged data set, which corresponds to the bdat of the calf.

Not sure how to proceed. Now need to figure out how to tag when the IceQubes went on, when the second feeding was administered, and when the tags came off so that the data is only representative of when the tags were on the calf. Would additionally like to add some variables that show time from second feeding (0) with time before going -1, -2, etc, and time after going +1, +2, for each calf.

## Using Merged Data Set to do more stuff

```{r}
#| include: false
#| warning: false
#| echo: false

#adds a variable called "match_flag" that flags when a calf was fed their second feeding

#but want to flag a bit different. Need to think on how to do this!

merged_data <- merged_data |> 
  mutate(
    match_flag = if_else(
      Date == OnDate & 
        (as.numeric(Fed2Time - Time, units="mins") >=0 &
        as.numeric(Fed2Time - Time, units = "mins") <= 14), 
      1,  
      0    )) 

#adds variable tffeed, which calls time of feeding 0, all time before progressively negative, all time after progressively positive

merged_data |> 
  group_by(CalfID) |> 
  summarize(matches = list(which(match_flag == 1)))

merged_data <- merged_data |> 
  group_by(CalfID) |>  
  mutate(
    tffeed = if_else(match_flag == 1, 0, NA_integer_),  
    tffeed = if_else(is.na(tffeed), row_number() - which(match_flag == 1), tffeed)  
  ) |> 
  ungroup()

#creates a new variable called hoursfrom which groups behaviors by hours from the second feeding. This will allow looking at the 8hrs prior to feeding and the 8 or 12 hrs later. Should probably make a new df to look at that. 

merged_data <- merged_data |> 
  mutate(
    hoursfrom = case_when(
      tffeed == 0 ~ 0,                                      
      tffeed < 0 ~ as.integer((abs(tffeed) - 1) %/% 4 + 1) * -1,  
      tffeed > 0 ~ as.integer((tffeed - 1) %/% 4 + 1)           
    )
  )


write.csv(merged_data, "data/merged_data.csv", row.names = FALSE)
```

## New Data Set and Data Visualization!

This data set uses the merged_data set and filters out all hours except for the +/-8hrs around feeding time. Then makes a graph of calf behavior before and after feeding.

```{r}
#| warning: false
#| echo: false


laying <- merged_data |> 
  filter(hoursfrom >= -8 & hoursfrom <= 16) |> 
  group_by(CalfID, hoursfrom) |>  
  summarize(
    `Lying [t]` = sum(`Lying [t]`, na.rm = TRUE)) |> 
  group_by(hoursfrom) |>  
  summarize(
    `Lying [t]` = mean(`Lying [t]`, na.rm = TRUE)) |> 
  mutate(
    lyingm = `Lying [t]` / 60) |> 
  ungroup()


laying |> 
ggplot(aes(x = hoursfrom, y = lyingm)) +
  theme_classic() +
  geom_point() +  
  geom_line() +   
  labs(
    title = "Lying Time in the 24hrs around the second feeding",
    x = "Hours from feeding Time",
    y = "Lying Time (min)")+
    scale_y_continuous(limits = c(0, 60), breaks = seq(0, 60, by = 5))+
    scale_x_continuous(limits = c(-8, 16), breaks = seq(-8, 16, by = 2))
```

```{r}
#| warning: false
#| echo: false


standing <- merged_data |> 
  filter(hoursfrom >= -8 & hoursfrom <= 16) |> 
  group_by(CalfID, hoursfrom) |>  
  summarize(
    `Standing [t]` = sum(`Standing [t]`, na.rm = TRUE)) |> 
  group_by(hoursfrom) |>  
  summarize(
    `Standing [t]` = mean(`Standing [t]`, na.rm = TRUE)) |> 
  mutate(
    standm = `Standing [t]` / 60) |> 
  ungroup()


standing |> 
ggplot(aes(x = hoursfrom, y = standm)) +
  theme_classic() +
  geom_point() +  
  geom_line() +   
  labs(
    title = "Standin Time in the 24hrs around the second feeding",
    x = "Hours from feeding Time",
    y = "Standing Time (min)") +
    scale_y_continuous(limits = c(0, 60), breaks = seq(0, 60, by = 5))+
    scale_x_continuous(limits = c(-8, 16), breaks = seq(-8, 16, by = 2))
```

## Graphs by Treatment Group

```{r}
#| warning: false
#| echo: false


layinggrp <- merged_data |> 
  filter(hoursfrom >= -8 & hoursfrom <= 16) |> 
  group_by(CalfID, hoursfrom, D0Fed2TxGrp) |>  
  summarize(
    `Lying [t]` = sum(`Lying [t]`, na.rm = TRUE)) |> 
  group_by(hoursfrom, D0Fed2TxGrp) |>  
  summarize(
    `Lying [t]` = mean(`Lying [t]`, na.rm = TRUE)) |> 
  mutate(
    lyingm = `Lying [t]` / 60) |> 
  ungroup()


layinggrp |> 
ggplot(aes(x = hoursfrom, y = lyingm, color=D0Fed2TxGrp)) +
  theme_classic() +
  geom_point() +  
  geom_line() +   
  labs(
    title = "Lying Time in the 24hrs around the second feeding",
    x = "Hours from feeding Time",
    y = "Lying Time (min)")+
    scale_y_continuous(limits = c(0, 60), breaks = seq(0, 60, by = 5))+
    scale_x_continuous(limits = c(-8, 16), breaks = seq(-8, 16, by = 2))
```

```{r}
#| warning: false
#| echo: false


standinggrp <- merged_data |> 
  filter(hoursfrom >= -8 & hoursfrom <= 16) |> 
  group_by(CalfID, hoursfrom, D0Fed2TxGrp) |>  
  summarize(
    `Standing [t]` = sum(`Standing [t]`, na.rm = TRUE)) |> 
  group_by(hoursfrom, D0Fed2TxGrp) |>  
  summarize(
    `Standing [t]` = mean(`Standing [t]`, na.rm = TRUE)) |> 
  mutate(
    standm = `Standing [t]` / 60) |> 
  ungroup()


standinggrp |> 
ggplot(aes(x = hoursfrom, y = standm, color=D0Fed2TxGrp)) +
  theme_classic() +
  geom_point() +  
  geom_line() +   
  labs(
    title = "Standing Time in the 24hrs around the second feeding",
    x = "Hours from feeding Time",
    y = "Standing Time (min)") +
    scale_y_continuous(limits = c(0, 60), breaks = seq(0, 60, by = 5))+
    scale_x_continuous(limits = c(-8, 16), breaks = seq(-8, 16, by = 2))
```

## Time (15min increments vs. hours)

```{r}
#| warning: false
#| echo: false


layinggrp_min <- merged_data |> 
  filter(tffeed >= -8 & tffeed <= 8) |> 
  group_by(CalfID, tffeed, D0Fed2TxGrp) |>  
  summarize(
    `Lying [t]` = sum(`Lying [t]`, na.rm = TRUE)) |> 
  group_by(tffeed, D0Fed2TxGrp) |>  
  summarize(
    `Lying [t]` = mean(`Lying [t]`, na.rm = TRUE)) |> 
  mutate(
    lyingm = `Lying [t]` / 60) |> 
  ungroup()


layinggrp_min |> 
ggplot(aes(x = tffeed, y = lyingm, color=D0Fed2TxGrp)) +
  theme_classic() +
  geom_point() +  
  geom_line() +   
  labs(
    title = "Lying Time in the 2hrs around the second feeding",
    x = "Min(15) from feeding Time",
    y = "Lying Time (min)")+
    scale_y_continuous(limits = c(0, 20), breaks = seq(0, 20, by = 5))+
    scale_x_continuous(limits = c(-8, 8), breaks = seq(-8, 8, by = 2))
```

```{r}
#| warning: false
#| echo: false


standinggrp_min <- merged_data |> 
  filter(tffeed >= -8 & tffeed <= 8) |> 
  group_by(CalfID, tffeed, D0Fed2TxGrp) |>  
  summarize(
    `Standing [t]` = sum(`Standing [t]`, na.rm = TRUE)) |> 
  group_by(tffeed, D0Fed2TxGrp) |>  
  summarize(
    `Standing [t]` = mean(`Standing [t]`, na.rm = TRUE)) |> 
  mutate(
    standm = `Standing [t]` / 60) |> 
  ungroup()


standinggrp_min |> 
ggplot(aes(x = tffeed, y = standm, color=D0Fed2TxGrp)) +
  theme_classic() +
  geom_point() +  
  geom_line() +   
  labs(
    title = "Standing Time in the 4hrs around the second feeding",
    x = "Min(15) from feeding Time",
    y = "Standing Time (min)") +
    scale_y_continuous(limits = c(0, 20), breaks = seq(0, 20, by = 5))+
    scale_x_continuous(limits = c(-8, 8), breaks = seq(-8, 8, by = 2))
```
